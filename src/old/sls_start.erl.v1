-module(sls_start).

-export([start/0]).

% make shell-sls
% c('../../src/sls_start').
% sls_start:start().
%
% nksip:stop_all().

start() ->
io:format("server~n"),
    {ok, _} = nksip:start(server, #{
        sip_local_host => "localhost",
        callback => nksip_tutorial_server_callbacks,
        plugins => [nksip_registrar],
        transports => "sip:all:5060, <sip:all:5061;transport=tls>"
    }),
timer:sleep(3000),
io:format("client1~n"),
    {ok, _} = nksip:start(client1, #{
        sip_local_host => "localhost",
        sip_from => "sip:client1@nksip",
        callback => nksip_tutorial_client_callbacks,
        plugins => [nksip_uac_auto_auth],
        transports => "sip:127.0.0.1:5070, sips:127.0.0.1:5071"
    }),
timer:sleep(3000),
io:format("client2~n"),
    {ok, _} = nksip:start(client2, #{
        sip_local_host => "localhost",
        sip_from => "sips:client2@nksip",
        callback => nksip_tutorial_client_callbacks,
        plugins => [nksip_uac_auto_auth],
%        transports => "sip:all, sips:all"
        transports => "sip:127.0.0.1:5072, sips:127.0.0.1:5073"
    }),
timer:sleep(3000),
io:format("register~n"),
    {ok,200,
    [{<<"contact">>, 
    [<<"<sip:client1@localhost:5070>", _/binary>>]}]} = 
    				           nksip_uac:register(client1, "sip:127.0.0.1",		
                 			             [{sip_pass, "1234"}, contact, {meta, [<<"contact">>]}]).
